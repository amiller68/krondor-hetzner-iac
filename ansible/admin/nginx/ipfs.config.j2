limit_req_zone $binary_remote_addr zone=ipfs_api:10m rate=10r/s;

# Server block listening on ports 80 and 443
server {
    listen 80;
    listen 443 ssl http2;
    server_name ipfs.{{ domain }};

    ssl_certificate /etc/letsencrypt/live/ipfs.{{ domain }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ipfs.{{ domain }}/privkey.pem; # managed by Certbot

    # Direct all root requests to the gateway
    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Redirect HTTP to HTTPS
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }
}

# Server block listening specifically on port 5001
server {
    listen 5001 ssl http2;
    server_name ipfs.{{ domain }};

    ssl_certificate /etc/letsencrypt/live/ipfs.{{ domain }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ipfs.{{ domain }}/privkey.pem; # managed by Certbot

    # Direct all API requests to the API
    location / {
        limit_req zone=ipfs_api burst=20 nodelay;
        client_max_body_size 256M;

        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd_ipfs;

        # Note: the prefix is important here
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Redirect HTTP to HTTPS
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }
}
