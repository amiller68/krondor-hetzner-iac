# Create a new Admin user on the host
# Allows to configure:
# - ssh pub key
# TODO: allow configuring the admin name
# The specified user will be created if it does not exist
# Its permissions will be updated if they are different
# The specified ssh pub key will be added to the user's authorized_keys
# If the user already has a different ssh pub key, it will be removed
# If the specified user is root, the root login will be disabled

- hosts: all
  name: Create an admin user on the host
  tasks:
    - name: Are we running as root?
      become: yes
      shell: "whoami"
      register: whoami
      ignore_errors: yes
    - name: Set is_root fact
      set_fact:
        is_root: "{{ whoami.stdout == 'root' }}"

    - name: Create an admin group if it does not exist
      become: yes
      group:
        name: admin
        state: present
    - name: Create the admin user if it does not exist
      become: yes
      user:
        name: admin
        groups: admin
        append: yes
        state: present
    - name: Make admins passwordless sudoers
      become: yes
      lineinfile:
        path: /etc/sudoers
        line: "%admin ALL=(ALL) NOPASSWD: ALL"
        state: present
        regexp: "^%admin ALL=(ALL) NOPASSWD: ALL"

    - name: Get the admin's ssh pub key from the control machine
      set_fact:
        user_ssh_pub_key: "{{ lookup('file', '{{ admin_ssh_pub_key_path }}') }}"
      when: admin_ssh_pub_key_path is defined
    - name: Make sure the user has an authorized keys directory
      become: yes
      file:
        path: "/etc/ssh/authorized/admin/"
        state: directory
        owner: admin
        group: admin
        mode: '0700'
    - name: Make sure the admin user has an authorized_keys file
      become: yes
      file:
        path: "/etc/ssh/authorized/admin/authorized_keys"
        state: touch
        owner: admin
        group: admin
        mode: '0600'
    - name: Add the user's ssh pub key
      become: yes
      lineinfile:
        path: "/etc/ssh/authorized/admin/authorized_keys"
        line: "{{ admin_ssh_pub_key }}"
        state: present
        regexp: "^{{ admin_ssh_pub_key }}"
      when: admin_ssh_pub_key is defined

    # Lock the door on your way out. When run as root, this will disable root login
    #  BE VERY SURE YOU ARE INLUDING A VALID PUB KEY FOR THE USER YOU ARE CREATING
    - name: Disable root login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "PermitRootLogin no"
        state: present
        regexp: "^PermitRootLogin"
      when: is_root
    - name: Update where authorized keys are stored
      become: yes
      lineinfile:
          path: /etc/ssh/sshd_config
          line: "AuthorizedKeysFile     /etc/ssh/authorized/%u/authorized_keys /etc/ssh/authorized/%u/authorized_keys2"
          state: present
          regexp: "^AuthorizedKeysFile"
      when: is_root
    - name: Disable password login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "PasswordAuthentication no"
        state: present
        regexp: "^PasswordAuthentication"
      when: is_root
    - name: Enable ssh key login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "PubkeyAuthentication yes"
        state: present
        regexp: "^PubkeyAuthentication"
      when: is_root
    - name: Restart sshd
      become: yes
      service:
        name: sshd
        state: restarted
      when: is_root
