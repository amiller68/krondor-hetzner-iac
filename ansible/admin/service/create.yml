# Setup a a user for a new service 
# - service name

- hosts: all
  name: Setup a Hetzner instance with a specified service user
  tasks:
    # Check if the admin user exists and is a sudoer
    - name: Check if the service user exists
      become: yes
      shell: "id {{ service_name}}"
      register: service_service_exists
      ignore_errors: yes
 
    # Create the user for the service if it does not exist
    - name: Generate a random password
      set_fact:
        service_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
    - name: Create the service user
      become: yes
      user:
        name: "{{ service_name }}"
        password: "{{ service_password }}"
        shell: /bin/bash
        update_password: always
        state: present
      when: service_service_exists.rc != 0
    - name: Save the service's password to a file on the instance
      become: yes
      copy:
        content: "{{ service_password }}"
        dest: /home/{{ service_name }}/{{ service_name }}.password
        mode: '0600'
        owner: "{{ service_name }}"
        group: "{{ service_name }}"

    - name: Get the admin user's ssh pub key
      become: yes
      shell: "cat /home/admin/.ssh/authorized_keys"
      register: admin_ssh_pub_key
    - name: Make sure the service user has a .ssh directory
      become: yes
      file:
        path: /home/{{ service_name }}/.ssh
        state: directory
        owner: "{{ service_name }}"
        group: "{{ service_name }}"
        mode: '0700'
    - name: Make sure the user has an authorized_keys file
      become: yes
      file:
        path: /home/{{ service_name }}/.ssh/authorized_keys
        state: touch
        owner: "{{ service_name }}"
        group: "{{ service_name }}"
        mode: '0600'
    - name: Add the admin's ssh pub key
      become: yes
      lineinfile:
        path: /home/{{ service_name }}/.ssh/authorized_keys
        line: "{{ admin_ssh_pub_key.stdout }}"
        state: present
        regexp: "^{{ admin_ssh_pub_key.stdout | regex_escape() }}"
      ignore_errors: yes